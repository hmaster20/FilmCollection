Направления для разработки:
=====================================================
- добавить сортировку при клике по заголовку таблицы актеров
- обработать клики по пустому списку актеров
- автоматическое формирование логов
- автоматическая отправка логов, кол-во элементов в базе, время работы
- автоматическое получение обновлений
- продумать возможность кэширования базы XML, использование Lazy
- исправить проблему очистки дерева при очистке базы
- исправить проблему очистки панели просмотра
- сделать контекстное меню для постеров
- при изменении любого поля и дальнейшем селекте выводить уведомление (yes,no) 
		если да возвращаться в редактор, 
		если нет выводить содержимое селекта (не пользоваться блокировкой)
- предусмотреть отдельные механизмы удаления списка файлов, списка актеров
- возможность ввода биографии актеров
- добавить возможность перемещения файлов
- продумать поисковый механизм (есть проблема при поиске последующего элемента, если включена фильтрация)
- доработать механизм создания и удаления базы
- оптимизировать создание дерева до передачи интерфейсу
- Сделать настраиваемый фильтр для добавления файлов в процессе создания базы (mkv,avi, *)
- обеспечить возможность восстановления удаленной записи (уведомлять об удалении записи но не файла)
- добавить переименование файлов (массовое по маске)
- drag & drop для таблицы и дерева
- Сделать расчет для прогресс бара
- разработать форму настроек приложения
- Сделать опцию настройки и добавления столбцов // this.customersDataGridView.Columns[0].Visible = false;
- экспорт (или хранение) файлов в форматах: XML, bin
- Сделать сохранение параметров в папку appdata
- создание отчетов в форматах word, excel, HTML
- продумать использование FileWatcher
- использование доп.информации о файлах (кодеки)
- продумать возможность интеграции данных в SQL
- добавить возможность проверки наличия обновлений
- добавить файл с историей изменений для каждой версии












###########################################################################################################
 private void DeleteRec_Click(object sender, EventArgs e)
       
             * Кто поможет написать код для удалении строк из DataGridView,
             * что бы после рефреша формы или проекта не строка с такой ID больше не появлялся в списке DataGridView.
             * если удалить все то так:
             * dataGridView1.Rows.Clear();
             * dataGridView1.Refresh();
             * если конкретную строчку то надо знать ее индекс
             * dataGridView1.Rows.RemoveAt(индекс строки);
             * dataGridView1.Refresh();
             * можно удалить и имея объект row
             * dataGridView1.Rows.Remove(row);
             * dataGridView1.Refresh();
             * дополнительно вам надо ее еще и из базы удалить. 
             * Необходимо знать уникальный идентификатор записи в базе (обычно Id), выполнить запрос на удаление
             */


               //Regex my_reg = new Regex("[0-9]+");
                // string out_string = my_reg.Replace(_videoCollection.VideoList[i].Name, "");

                //FindCinema(_videoCollection.VideoList[i].Name)
                //s = Regex.Replace(s, "[^0-9.]", "");

                // удалить все цифры
                //var output = Regex.Replace(_videoCollection.VideoList[i].Name, @"[\d-]", string.Empty);
                //vудалить все цифры и точки
                //var output = Regex.Replace(_videoCollection.VideoList[i].Name, @"[\d-.]", string.Empty);
                //vудалить все что не цифры и не буквы, кроме тире
                //var output = Regex.Replace(_videoCollection.VideoList[i].Name, @"[^a-zA-Z0-9 -]", string.Empty);

                //удаление всех латинских букв, цифр, подчеркивания, точки, скобок
                //var output = Regex.Replace(_videoCollection.VideoList[i].Name, @"[a-zA-Z0-9_.()]", string.Empty);

                // Удаление всех латинских букв, цифр, подчеркивания, точки, скобок
                //string output = Regex.Replace(_videoCollection.VideoList[i].Name, @"[a-zA-Z0-9_.()]", string.Empty);

                /*
                string output2 = Regex.Replace(_videoCollection.VideoList[i].Name, @"[a-zA-Z_.()]", string.Empty);
                string output = Regex.Replace(output2, @"[0-9]{4}", string.Empty);
                output = output.Trim(); //убираем пробелы вначале и конце
                MessageBox.Show(output);
                */


//MessageBox.Show(month + "/" + day + "/" + year);

//maskDateOfBirth.
// \d{ 2}/\d{ 2}/\d{ 4}
//  00/00/0000

//string regReplace = tbFind.Text.Replace("*", "");//замена вхождения * 
//Regex regex = new Regex(regReplace, RegexOptions.IgnoreCase);


//    if (regex.IsMatch(row.Cells[cell].Value.ToString()))
//    {
//        i++;
//        dgvSelected.Add(row.Cells[cell].RowIndex);
//        row.Selected = true;
//        //break; //Требуется для выбора одно строки
//    }

//Regex regex = new Regex(@"\b([0-2][0-9][0-1][0-9]1[8-9][0-9][0-9])");
//Match match = regex.Match(maskDateOfBirth.Text);
//if (match.Success)
//{
//    // Console.WriteLine(match.Value);
//    MessageBox.Show(match.Value);
//}




      private void listCreate()
        {
            listView1.View = View.Details;
            listView1.MultiSelect = false;
            listView1.FullRowSelect = true;
            listView1.Columns.Add("Название");
            listView1.Columns.Add("Каталог");
            listView1.Columns.Add("Год");
            listView1.Columns.Add("Страна");
            listView1.Columns.Add("Жанр");
            listView1.Columns.Add("Категория");
            listView1.Columns.Add("Время");
            listView1.Columns.Add("Файл");
            listView1.Items.Clear();
            for (int i = 0; i < _videoCollection.VideoList.Count; i++)
            {
                listView1.Items.Add(_videoCollection.VideoList[i].Name);
                listView1.Items[i].SubItems.Add(_videoCollection.VideoList[i].DirName);
                listView1.Items[i].SubItems.Add(_videoCollection.VideoList[i].Year.ToString());
                listView1.Items[i].SubItems.Add(_videoCollection.VideoList[i].CountryString);
                listView1.Items[i].SubItems.Add(_videoCollection.VideoList[i].GenreString);
                listView1.Items[i].SubItems.Add(_videoCollection.VideoList[i].CategoryString);
                listView1.Items[i].SubItems.Add(_videoCollection.VideoList[i].Time.ToString());
                listView1.Items[i].SubItems.Add(_videoCollection.VideoList[i].FileName);
            }

        }


		            //base.OnPaint(e);
            //Pen penBorder = new Pen(Color.Gray, 1);
            //Rectangle rectBorder = new Rectangle(e.ClipRectangle.X, e.ClipRectangle.Y, e.ClipRectangle.Width - 1, e.ClipRectangle.Height - 1);
            //e.Graphics.DrawRectangle(penBorder, rectBorder);

            //Rectangle textRec = new Rectangle(e.ClipRectangle.X + 1, e.ClipRectangle.Y + 1, e.ClipRectangle.Width - 1, e.ClipRectangle.Height - 1);
            //TextRenderer.DrawText(e.Graphics, Text, this.Font, textRec, this.ForeColor, this.BackColor, TextFormatFlags.Default);

            //    toolStripTextBox1.BorderStyle = BorderStyle.None;
            //    Pen p = new Pen(SystemColors.ControlDark, 5);
            //    Graphics g = e.Graphics;
            //    g.DrawRectangle(p, new Rectangle(20, -15, 129, 90));



			//try
            //{
            //    string[] dateComponents = maskDateOfBirth.Text.Split('.');
            //    string month = dateComponents[0].Trim();
            //    string day = dateComponents[1].Trim();
            //    string year = dateComponents[2].Trim();
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message);
            //}




			//DirectoryInfo directory = new DirectoryInfo(Directory.GetCurrentDirectory());
            //FileInfo[] files = directory.GetFiles("VideoList_*.xml", SearchOption.AllDirectories);

            //for (int i = 0; i < files.Length; i++)
            //{
            //    // listView1.Items.Add(files[i].Name).BackColor = (files[i].Length > 2) ? Color.Green : Color.Red;
            //    // listView1.Items.Add(files[i].Name).Font = new Font(listView1.Font, FontStyle.Strikeout);

            //    if (files[i].Length < 2)
            //    {
            //        listView1.Items.Add(files[i].Name).Font = new Font(listView1.Font, FontStyle.Strikeout);
            //        continue;
            //    }
            //    listView1.Items.Add(files[i].Name);
            //}







			
            //IEnumerable<FileInfo> Bases = directory.GetFiles("VideoList_*.xml").Where(f => !f.Name.Contains("BAD"));
            //int BaseCount = Bases.Count();

            //for (int i = 0; i < BaseCount; i++)
            //{
            //    string[] subStrings = files[i].ToString().Split('_');

            //    // Дата файла
            //    if (files[i].Length < 2)
            //        listView1.Items.Add(subStrings[1]).Font = new Font(listView1.Font, FontStyle.Strikeout);
            //    else
            //        listView1.Items.Add(subStrings[1]);
            //    //listView1.Items[i].SubItems.Add(subStrings[1]);

            //    // Время создания файла
            //    listView1.Items[i].SubItems.Add(subStrings[2].Remove(subStrings[2].Length - 4, 4));

            //    // Размер файла базы
            //    long Size = files[i].Length;
            //    string _size = "";
            //    if (Size <= 1024) _size = Size.ToString() + " Байт";
            //    else if (Size > 1024 && Size <= 1024 * 1024) _size = (Math.Round((float)Size / 1024)).ToString() + " КБ";
            //    else if (Size > 1024 * 1024) _size = Math.Round(((double)Size / (1024 * 1024)), 1).ToString() + " МБ";
            //    listView1.Items[i].SubItems.Add(_size);
            //}




=================================================================================================================================================




			

//public Record()
//{
//    //ActorID = new List<int>();          // Создание списка ID
//}

// public int Id { get; set; }             // Уникальный идентификатор


//private int _year;                      // Год выпуска
//public int Year
//{
//    get { return _year; }
//    set { _year = (Enumerable.Range(1800, DateTime.Now.Year).Contains(value)) ? value : DateTime.Now.Year; }
//}


//private int _time;                      // Время (в минутах)
//public int Time
//{
//    get { return _time; }
//    set { _time = (value < 0) ? 0 : value; }
//}

// public string Description { get; set; } = ""; // Описание файла (сюжет)        
// public string Pic { get; set; } = "";


//#region Список ID актеров

//private List<int> _actorID;     // Объявление ID актеров
//public List<int> ActorID
//{
//    get { return _actorID; }
//    set { _actorID = value; }
//}


//public void Add(int id)
//{
//    ActorID.Add(id);
//}

//public void Remove(int id)
//{
//    ActorID.Remove(id);
//}

//public void ClearID()
//{
//    ActorID.Clear();
//}

//#endregion



//public static int CompareByYear(Record a, Record b)
//{
//    if (a.Year == b.Year)
//        return CompareByName(a, b);
//    return (a.Year - b.Year);
//}



//public static int CompareByYear(Record a, Record b)     // Сравнение по году
//{
//    if (a.Year != "" && b.Year != "")
//    {
//        string aYearString = a.Year.Substring(0, 4);
//        string bYearString = b.Year.Substring(0, 4);

//        if (aYearString == bYearString)
//            return CompareByName(a, b);
//        int aYear = 0;
//        int bYear = 0;
//        if (int.TryParse(aYearString, out aYear) && int.TryParse(bYearString, out bYear))
//            return (int)((bYear - aYear) * 100);
//    }
//    return CompareByName(a, b);
//}


//public static int CompareByTime(Record a, Record b)     // Сравнение по времени записи
//{
//    if (a.Time == b.Time)
//        return CompareByName(a, b);
//    return (int)((b.Time - a.Time) * 100);
//}














=================================================================================================================================================
Вверх и вниз для checkListBox


      private void btnMoveUp_Click(object sender, System.EventArgs e)
        {
            int index = chkActorList.SelectedIndices[0];
            if (index != 0)
            {
                ArrayList list = new ArrayList();
                CheckedListBox cb = new CheckedListBox();
                cb.Items.AddRange(chkActorList.Items);
                for (int i = 0; i < chkActorList.CheckedItems.Count; i++)
                {
                    cb.SetItemCheckState(cb.Items.IndexOf(chkActorList.CheckedItems[i]), CheckState.Checked);
                }
                list.AddRange(chkActorList.Items);
                ArrayList newlist = new ArrayList(list);
                newlist[index] = list[index - 1];
                newlist[index - 1] = list[index];
                chkActorList.Items.Clear();
                chkActorList.Items.AddRange((string[])newlist.ToArray(typeof(string)));
                for (int i = 0; i < cb.CheckedItems.Count; i++)
                {
                    chkActorList.SetItemCheckState(chkActorList.Items.IndexOf(cb.CheckedItems[i]), CheckState.Checked);
                }
                chkActorList.SelectedItem = chkActorList.Items[index - 1];
            }
        }

        private void btnMoveDown_Click(object sender, System.EventArgs e)
        {
            int index = chkActorList.SelectedIndices[0];
            if (index != chkActorList.Items.Count - 1)
            {
                CheckedListBox cb = new CheckedListBox();
                cb.Items.AddRange(chkActorList.Items);
                for (int i = 0; i < chkActorList.CheckedItems.Count; i++)
                {
                    cb.SetItemCheckState(cb.Items.IndexOf(chkActorList.CheckedItems[i]), CheckState.Checked);
                }
                ArrayList list = new ArrayList();
                list.AddRange(chkActorList.Items);
                ArrayList newlist = new ArrayList(list);
                newlist[index] = list[index + 1];
                newlist[index + 1] = list[index];
                chkActorList.Items.Clear();
                chkActorList.Items.AddRange((string[])newlist.ToArray(typeof(string)));
                for (int i = 0; i < cb.CheckedItems.Count; i++)
                {
                    chkActorList.SetItemCheckState(chkActorList.Items.IndexOf(cb.CheckedItems[i]), CheckState.Checked);
                }
                chkActorList.SelectedItem = chkActorList.Items[index + 1];
            }
        }



=================================================================================================================================================
Построение дерева

		private void CreateTree()      
        {
            //XmlDocument doc = new XmlDocument();
            //doc.Load(RecordOptions.BaseName);                // Получения файла базы

            //int SourceLength = _videoCollection.Options.Source.Length;  // Получение длинны пути

            //XmlNodeList nodeList = doc.GetElementsByTagName("Path");        // Чтение элементов "Path"

            //treeFolder.Nodes.Clear();                                       // Очистка дерева

            //var paths = new List<string>();                                 // Создание списка
            //paths.Add("Фильмотека");

            //foreach (XmlNode node in nodeList)                              // Заполнение списка для формирования дерева
            //{
            //    try
            //    {
            //        string temp = "";
            //        if (node.ChildNodes[0].Value.Length > SourceLength)     // длинна патча, не должна превышать полного пути к директории
            //            if (-1 != node.ChildNodes[0].Value.Substring(SourceLength).IndexOf(Path.DirectorySeparatorChar))
            //            {
            //                temp = node.ChildNodes[0].Value.Substring(SourceLength + 1); //Обрезка строку путь C:\temp\1\11 -> 1\11
            //                if (temp.Length != 0)
            //                {
            //                    string tt = node.ChildNodes[0].Value.Substring(SourceLength + 1);
            //                    if (!paths.Exists(x => x == tt)) paths.Add(tt);
            //                }
            //            }
            //    }
            //    catch (NullReferenceException e)
            //    {
            //        MessageBox.Show(e.Message + " " + node.Name + " - не заполнен!");
            //    }
            //}

            PopulateTreeView(treeFolder, str3, Path.DirectorySeparatorChar, str3.Count);

            //PopulateTreeView(treeFolder, paths, Path.DirectorySeparatorChar, paths.Count);
            //treeFolder.AfterSelect += treeFolder_AfterSelect;
            // TreeFast(paths);
        }

		
=================================================================================================================================================
Построение дерева (2 версия)


		  private void CreateTree()       // Построение дерева
        {
            treeFolder.Nodes.Clear();                                  // Очистка дерева
            int SourceLength = _videoCollection.Options.Source.Length; // Получение длинны пути
 
            List<Record> listRecord = new List<Record>();
            _videoCollection.CombineList.ForEach(combine => listRecord.AddRange(combine.recordList));
              

            List<string> listPath = new List<string>();

            foreach (Record rec in listRecord)
                if (rec.Visible == true)
                    listPath.Add(rec.Path);

            List<string> listPathDistinct = listPath.Distinct().ToList();

            listPathDistinct.Sort();

            List<string> listForTreeView = new List<string>() { "Фильмотека" };

            //listForTreeView.Add("Фильмотека");

            try
            {
                for (int i = 0; i < listPathDistinct.Count; i++)
                {
                    if (listPathDistinct[i].Substring(SourceLength).Length > 0)
                        listForTreeView.Add(listPathDistinct[i].Substring(SourceLength + 1));   //Обрезка строку путь C:\temp\1\11 -> 1\11
                }
            }
            catch (Exception ex) { MessageBox.Show(ex.Message); }

            PopulateTreeView(treeFolder, listForTreeView, Path.DirectorySeparatorChar, listForTreeView.Count);

            //treeFolder.AfterSelect += treeFolder_AfterSelect;
            // TreeFast(paths);
        }

